import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { MoodEntry, ApplicationUsage, MLPrediction } from '../types/wellness';

export class PDFExportService {
  async exportWellnessReport(data: {
    moodEntries: MoodEntry[];
    applicationUsage: ApplicationUsage[];
    predictions: MLPrediction[];
    studentName: string;
    dateRange: { start: Date; end: Date };
  }): Promise<void> {
    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();

    // Header
    pdf.setFontSize(20);
    pdf.setTextColor(59, 130, 246); // Blue color
    pdf.text('MindWyn Wellness Report', 20, 30);

    pdf.setFontSize(12);
    pdf.setTextColor(0, 0, 0);
    pdf.text(`Student: ${data.studentName}`, 20, 45);
    pdf.text(`Report Period: ${data.dateRange.start.toLocaleDateString()} - ${data.dateRange.end.toLocaleDateString()}`, 20, 55);
    pdf.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 65);

    // Mood Summary
    let yPosition = 85;
    pdf.setFontSize(16);
    pdf.setTextColor(34, 197, 94); // Green color
    pdf.text('Mood Analysis', 20, yPosition);
    
    yPosition += 15;
    pdf.setFontSize(10);
    pdf.setTextColor(0, 0, 0);

    if (data.moodEntries.length > 0) {
      const avgMood = data.moodEntries.reduce((sum, entry) => sum + entry.mood, 0) / data.moodEntries.length;
      const avgEnergy = data.moodEntries.reduce((sum, entry) => sum + entry.energy, 0) / data.moodEntries.length;
      const avgStress = data.moodEntries.reduce((sum, entry) => sum + entry.stress, 0) / data.moodEntries.length;

      pdf.text(`Average Mood: ${avgMood.toFixed(1)}/5`, 20, yPosition);
      pdf.text(`Average Energy: ${avgEnergy.toFixed(1)}/5`, 20, yPosition + 10);
      pdf.text(`Average Stress: ${avgStress.toFixed(1)}/5`, 20, yPosition + 20);
      pdf.text(`Total Entries: ${data.moodEntries.length}`, 20, yPosition + 30);
      
      yPosition += 50;
    } else {
      pdf.text('No mood entries recorded during this period.', 20, yPosition);
      yPosition += 20;
    }

    // Application Usage
    pdf.setFontSize(16);
    pdf.setTextColor(139, 92, 246); // Purple color
    pdf.text('Application Usage', 20, yPosition);
    
    yPosition += 15;
    pdf.setFontSize(10);
    pdf.setTextColor(0, 0, 0);

    if (data.applicationUsage.length > 0) {
      const topApps = data.applicationUsage
        .sort((a, b) => b.timeSpent - a.timeSpent)
        .slice(0, 5);

      pdf.text('Top 5 Applications:', 20, yPosition);
      yPosition += 10;

      topApps.forEach((app, index) => {
        const hours = Math.floor(app.timeSpent / (1000 * 60 * 60));
        const minutes = Math.floor((app.timeSpent % (1000 * 60 * 60)) / (1000 * 60));
        pdf.text(`${index + 1}. ${app.name} (${app.category}): ${hours}h ${minutes}m`, 25, yPosition);
        yPosition += 8;
      });

      yPosition += 10;
    }

    // ML Predictions Summary
    if (data.predictions.length > 0) {
      pdf.setFontSize(16);
      pdf.setTextColor(245, 158, 11); // Orange color
      pdf.text('Stress & Focus Analysis', 20, yPosition);
      
      yPosition += 15;
      pdf.setFontSize(10);
      pdf.setTextColor(0, 0, 0);

      const latestPrediction = data.predictions[data.predictions.length - 1];
      pdf.text(`Current Stress Level: ${(latestPrediction.stressLevel * 100).toFixed(0)}%`, 20, yPosition);
      pdf.text(`Current Focus Level: ${(latestPrediction.focusLevel * 100).toFixed(0)}%`, 20, yPosition + 10);
      pdf.text(`Current Energy Level: ${(latestPrediction.energyLevel * 100).toFixed(0)}%`, 20, yPosition + 20);
      pdf.text(`Analysis Confidence: ${(latestPrediction.confidence * 100).toFixed(0)}%`, 20, yPosition + 30);

      yPosition += 50;
    }

    // Recommendations
    pdf.setFontSize(16);
    pdf.setTextColor(16, 185, 129); // Teal color
    pdf.text('Wellness Recommendations', 20, yPosition);
    
    yPosition += 15;
    pdf.setFontSize(10);
    pdf.setTextColor(0, 0, 0);

    const recommendations = [
      '• Take regular breaks every 25-30 minutes',
      '• Practice deep breathing exercises when stressed',
      '• Maintain a consistent sleep schedule',
      '• Stay hydrated throughout the day',
      '• Limit social media during study hours',
      '• Use the breathing exercises in MindWyn when feeling overwhelmed'
    ];

    recommendations.forEach(rec => {
      if (yPosition > pageHeight - 30) {
        pdf.addPage();
        yPosition = 30;
      }
      pdf.text(rec, 20, yPosition);
      yPosition += 8;
    });

    // Footer
    pdf.setFontSize(8);
    pdf.setTextColor(128, 128, 128);
    pdf.text('Generated by MindWyn - Digital Wellness Companion', 20, pageHeight - 20);
    pdf.text('This report is confidential and for personal use only.', 20, pageHeight - 10);

    // Save the PDF
    pdf.save(`mindwyn-wellness-report-${new Date().toISOString().split('T')[0]}.pdf`);
  }

  async exportDashboardScreenshot(elementId: string): Promise<void> {
    try {
      const element = document.getElementById(elementId);
      if (!element) {
        throw new Error('Dashboard element not found');
      }

      const canvas = await html2canvas(element, {
        backgroundColor: '#ffffff',
        scale: 2,
        logging: false
      });

      const pdf = new jsPDF();
      const imgWidth = pdf.internal.pageSize.getWidth();
      const imgHeight = (canvas.height * imgWidth) / canvas.width;

      pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 0, 0, imgWidth, imgHeight);
      pdf.save(`mindwyn-dashboard-${new Date().toISOString().split('T')[0]}.pdf`);
    } catch (error) {
      console.error('Failed to export dashboard screenshot:', error);
      throw error;
    }
  }
}

export const pdfExportService = new PDFExportService();